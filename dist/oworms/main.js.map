{"version":3,"sources":["./src/app/component/common/dropdown.component.ts","./src/app/component/common/dropdown.component.html","./src/app/component/filter/filter.component.ts","./src/app/component/filter/filter.component.html","./src/app/util/filter.util.ts","./src/environments/environment.ts","./src/app/util/config.ts","./src/app/component/list/words.component.ts","./src/app/component/list/words.component.html","./src/app/service/word.http.service.ts","./src/app/component/top/top.component.ts","./src/app/component/top/top.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/component/stats/statistics.component.ts","./src/app/component/stats/statistics.component.html","./src/app/service/word.service.ts","./src/app/app.module.ts","./src/app/pipe/chunk.pipe.ts","./src/app/model/part-of-speech.enum.ts","./src/app/component/common/input.component.ts","./src/app/component/common/input.component.html","./src/app/component/common/button.component.ts","./src/app/component/common/button.component.html","./src/app/guard/query-param-interceptor-guard.service.ts","./src/app/component/add/word-add.component.ts","./src/app/component/add/word-add.component.html","./src/app/util/subscription.util.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuE;;;;;;ICM/D,yEAEgC;IAA3B,yVAA0B;IAC3B,wEAAO;IAAA,uDAAgB;IAAA,4DAAQ;IACnC,4DAAM;;;;IAHD,uGAAyC;IAEnC,0DAAgB;IAAhB,8EAAgB;;ADA5B,MAAM,iBAAiB;IAL9B;QAQI,UAAK,GAAsB,EAAE,CAAC;QAG9B,UAAK,GAAW,QAAQ,CAAC;QAGzB,oBAAe,GAAY,KAAK,CAAC;QAGjC,mBAAc,GAAQ,EAAE,CAAC;QAGzB,4BAAuB,GAAY,IAAI,CAAC;QAExC,WAAM,GAAY,IAAI,CAAC;QAGd,gBAAW,GAAsB,IAAI,0DAAY,EAAO,CAAC;KAiCrE;IA/BG,UAAU,CAAC,IAAqB;QAC5B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,uBAAuB,CAAC;QAE3C,MAAM,WAAW,GAAkB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3F,IAAI,WAAW,EAAE;YACb,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;SAC3E;aAAM;YACH,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxC;QAED,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC/C,CAAC;IAED,cAAc,CAAC,MAAa;QACxB,MAAM,CAAC,cAAc,EAAE,CAAC;QACxB,MAAM,CAAC,eAAe,EAAE,CAAC;QAEzB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QAEnB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QAEzB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC9B,CAAC;IAED,UAAU,CAAC,KAAQ;QACf,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC;IAC9D,CAAC;IAED,QAAQ;QACJ,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxF,CAAC;;kFApDQ,iBAAiB;iGAAjB,iBAAiB;QCT9B,yEAAsB;QAClB,yEAAkE;QAAtC,kKAAqC;QAC7D,wEAAO;QAAA,uDAAgB;QAAA,4DAAQ;QAC/B,+EAAoD;QAAzC,kKAAiB,0BAAsB,IAAC;QAAC,4DAAC;QAAA,4DAAY;QACrE,4DAAM;QACN,yEAAmD;QAC/C,6GAIM;QACV,4DAAM;QACV,4DAAM;;QAVS,0DAAgB;QAAhB,+EAAgB;QAGA,0DAAuB;QAAvB,+EAAuB;QACF,0DAAQ;QAAR,8EAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;ACN5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkF;AAK9B;;;;;;;;ICF5C,yEAAwD;IACpD,yEAAwB;IACpB,8EAI4D;IAAlD,uYAAiD;IAAC,4DAAW;IACvE,+EAAiE;IAAxC,wXAAuC;IAAC,gEAAK;IAAA,4DAAY;IAClF,+EAAoE;IAA3C,2XAA0C;IAAC,4DAAC;IAAA,4DAAY;IACrF,4DAAM;IACV,4DAAM;;;IARY,0DAAkC;IAAlC,8FAAkC;;ADSrD,MAAM,eAAe;IAL5B;QAUI,gBAAW,GAAW,EAAE,CAAC;QACzB,eAAU,GAAiB,4DAAU,CAAC,aAAa,EAAE,CAAC;QACtD,+BAA0B,GAAiC,4DAAU,CAAC,4BAA4B,EAAE,CAAC;QACrG,4BAAuB,GAAmB,EAAE,CAAC;QAGpC,iBAAY,GAAyB,IAAI,0DAAY,EAAU,CAAC;KA8F5E;IA5FG,WAAW;QACP,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACtB,OAAO;SACV;QAED,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,aAAa,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC;QAE1F,MAAM,UAAU,GAAG,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,UAAU,IAAI,CAAC,CAAC,aAAa,IAAI,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,UAAU,CAAC;QAC/F,IAAI,UAAU,EAAE;YACZ,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC7B;IACL,CAAC;IAEO,kBAAkB;;QACtB,MAAM,YAAY,GAAiB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;;YAEhE,wGAAwG;YACxG,QAAQ,QAAQ,CAAC,GAAG,EAAE;gBAClB,KAAK,GAAG;oBACJ,QAAQ,CAAC,KAAK,SAAG,IAAI,CAAC,cAAc,0CAAE,OAAO,CAAC;oBAC9C,MAAM;gBACV,KAAK,KAAK;oBACN,QAAQ,CAAC,KAAK,SAAG,IAAI,CAAC,cAAc,0CAAE,UAAU,CAAC;oBACjD,MAAM;gBACV,KAAK,SAAS;oBACV,QAAQ,CAAC,KAAK,SAAG,IAAI,CAAC,cAAc,0CAAE,SAAS,CAAC;oBAChD,MAAM;gBACV,KAAK,QAAQ;oBACT,QAAQ,CAAC,KAAK,SAAG,IAAI,CAAC,cAAc,0CAAE,UAAU,CAAC;oBACjD,MAAM;aACb;YAED,OAAO,QAAQ,CAAC;QACpB,CAAC,CAAC,CAAC;QAEH,MAAM,aAAa,SAAG,IAAI,CAAC,cAAc,0CAAE,aAAa,CAAC;QACzD,IAAI,CAAC,CAAC,aAAa,EAAE;YACjB,IAAI,CAAC,uBAAuB,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,GAAW,EAAE,EAAE,CAAC,GAAmB,CAAC,CAAC;SAC1F;QAED,IAAI,CAAC,UAAU,GAAG,CAAC,GAAG,YAAY,CAAC,CAAC;IACxC,CAAC;IAED,SAAS,CAAC,IAAgB;QACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QAErB,IAAI,CAAC,WAAW,mCACT,IAAI,CAAC,WAAW,KACnB,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,GACzB,CAAC;QAEF,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7C,CAAC;IAED,YAAY,CAAC,IAAgB;QACzB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAEhB,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAElC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7C,CAAC;IAED,kBAAkB,CAAC,MAAsB;QACrC,IAAI,CAAC,uBAAuB,GAAG,MAAM,CAAC;QAEtC,MAAM,sBAAsB,GAAe;YACvC,GAAG,EAAE,KAAK;YACV,OAAO,EAAE,gBAAgB;YACzB,KAAK,EAAE,IAAI,CAAC,uBAAuB;YACnC,QAAQ,EAAE,KAAK;SAClB,CAAC;QACF,IAAI,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC;IAC3C,CAAC;IAED,WAAW,CAAC,MAAW,EAAE,IAAgB;QACrC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;IACxB,CAAC;IAED,YAAY;QACR,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAgB,EAAE,EAAE;YACzC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uBAAuB,GAAG,EAAE,CAAC;QAClC,IAAI,CAAC,YAAY,CAAC;YACd,GAAG,EAAE,KAAK;YACV,KAAK,EAAE,SAAS;YAChB,QAAQ,EAAE,KAAK;YACf,OAAO,EAAE,EAAE;SACd,CAAC,CAAC;IACP,CAAC;;8EAxGQ,eAAe;+FAAf,eAAe;QCd5B,yEAAoB;QAChB,qEAAI;QAAA,oEAAS;QAAA,4DAAK;QAClB,yEAAmB;QACf,2GAUM;QACN,iFAG+C;QADlC,8JAAe,8BAA0B,IAAC;QACR,4DAAc;QAC7D,+EAA4C;QAAjC,0JAAiB,kBAAc,IAAC;QAAC,wEAAa;QAAA,4DAAY;QACzE,4DAAM;QACV,4DAAM;;QAjB2C,0DAAa;QAAb,mFAAa;QAWzC,0DAAoC;QAApC,iGAAoC;;;;;;;;;;;;;;ACZzD;AAAA;AAAA;AAA4D;AAErD,MAAM,UAAU;IACnB,MAAM,CAAC,4BAA4B;QAC/B,MAAM,aAAa,GAAmB,MAAM,CAAC,MAAM,CAAC,uEAAY,CAAC,CAAC;QAElE,OAAO,aAAa,CAAC,GAAG,CAAC,CAAC,YAA0B,EAAE,EAAE,CAAC,CAAC;YACtD,KAAK,EAAE,YAAY;YACnB,QAAQ,EAAE,KAAK;SAClB,CAAC,CAAC,CAAC;IACR,CAAC;IAED,MAAM,CAAC,aAAa;QAChB,OAAO;YACH,EAAE,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE;YAChE,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE;YACxE,EAAE,GAAG,EAAE,SAAS,EAAE,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE;YAC5E,0BAA0B;YAC1B,0EAA0E;SAC7E,CAAC;IACN,CAAC;CACJ;;;;;;;;;;;;;ACvBD;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACvB,UAAU,EAAE,KAAK;CACpB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACbnE;AAAA;AAAO,MAAM,MAAM;;AACQ,iBAAU,GAAe;IAC5C,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,QAAQ,EAAE;IACrC,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,WAAW,EAAE;IACvC,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,cAAc,EAAE;IAC7C,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,cAAc,EAAE;IACjD,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,QAAQ,EAAE;IACtC,EAAE,IAAI,EAAE,kBAAkB,EAAE,IAAI,EAAE,qBAAqB,EAAE;CAC5D,CAAC;;;;;;;;;;;;;ACPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqD;AAIW;;;;;;;;;ICFxD,yEACkB;IACd,wEAAiB;IAAA,uDAAkB;IAAA,4DAAK;IACxC,wEAAsB;IAAA,uDAAqB;IAAA,4DAAI;IAC/C,wEAAe;IAAA,uDAAuB;IAAA,4DAAI;IAC9C,4DAAM;;;IAHe,0DAAkB;IAAlB,gFAAkB;IACb,0DAAqB;IAArB,mFAAqB;IAC5B,0DAAuB;IAAvB,qFAAuB;;;;IAE1C,0EAAwF;IAAnF,qTAAoB;IACrB,qEAAI;IAAA,6EAAkB;IAAA,4DAAK;IAC3B,oEAAG;IAAA,uDAAwD;IAAA,4DAAI;IACnE,4DAAM;;;IADC,0DAAwD;IAAxD,0IAAwD;;;;IAVvE,yEAAoE;IAChE,yEAAmB;IACf,gHAKM;;IACN,gHAGM;IACV,4DAAM;IACN,+EAAwF;IAA7E,uVAA0C;IAAmC,4DAAY;IACxG,4DAAM;;;IAZwB,0DAAsC;IAAtC,2KAAsC;IAMf,0DAAyC;IAAzC,mHAAyC;IAKpC,0DAAiC;IAAjC,iGAAiC;;;IAIvF,0EAAsB;IAClB,qEAAI;IAAA,uGAA4C;IAAA,4DAAK;IACzD,4DAAM;;ADLH,MAAM,cAAc;IAQvB,YAA6B,WAAwB,EACxB,KAAqB,EACrB,MAAc;QAFd,gBAAW,GAAX,WAAW,CAAa;QACxB,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QAR3C,UAAK,GAAW,EAAE,CAAC;QACnB,iBAAY,GAAS,EAAE,CAAC;QACxB,qBAAgB,GAAW,EAAE,CAAC;QACb,SAAI,GAAmB,EAAE,CAAC;IAM3C,CAAC;IAED,QAAQ;QACJ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;IACrC,CAAC;IAED,WAAW;QACP,wEAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAExC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAChB,EAAE,EACF;YACI,UAAU,EAAE,IAAI,CAAC,KAAK;YACtB,WAAW,EAAE;gBACT,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;aACpC;SACJ,CACJ,CAAC;IACN,CAAC;IAED,QAAQ;QACJ,IAAI,CAAC,gBAAgB,IAAI,EAAE,CAAC;IAChC,CAAC;IAED,UAAU,CAAC,IAAU;QACjB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC7B,CAAC;IAED,iBAAiB,CAAC,MAAc;QAC5B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAChB,EAAE,EACF;YACI,UAAU,EAAE,IAAI,CAAC,KAAK;YACtB,WAAW,kCACJ,MAAM,KACT,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,GACpC;SAEJ,CACJ,CAAC;IACN,CAAC;IAEO,SAAS;QACb,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa;aAC9B,IAAI,CACD,0DAAG,CAAC,CAAC,UAAoB,EAAE,EAAE;YACzB,OAAO;gBACH,OAAO,EAAE,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC;gBAC5B,UAAU,EAAE,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC;gBACjC,aAAa,EAAE,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC;gBACvC,SAAS,EAAE,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC;gBACpC,UAAU,EAAE,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC;aACvC,CAAC;QACN,CAAC,CAAC,EACF,0DAAG,CAAC,CAAC,UAAsB,EAAE,EAAE;YAC3B,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC;QACrC,CAAC,CAAC,EACF,gEAAS,CAAC,CAAC,UAAsB,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAClF,CAAC,SAAS,CAAC,CAAC,KAAa,EAAE,EAAE;YAC1B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YAEnB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;QAC5E,CAAC,CAAC,CAAC;IACP,CAAC;;4EA1EQ,cAAc;8FAAd,cAAc;QCjB3B,yEAAoB;QAChB,oEAAiB;QACrB,4DAAM;QACN,0GAcM;QAEN,sMAIc;;;QApBM,0DAAmC;QAAnC,qGAAmC;;;;;;;;;;;;;;ACFvD;AAAA;AAAA;AAAA;AAA8D;;;AAQvD,MAAM,eAAe;IAIxB,YAA6B,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAC7C,CAAC;IAED,WAAW,CAAC,UAAkC;QAC1C,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAChB,eAAe,CAAC,QAAQ,EACxB;YACI,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC;SACzC,CACJ,CAAC;IACN,CAAC;IAED,MAAM,CAAC,IAAU;QACb,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAO,eAAe,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAChE,CAAC;IAED,aAAa,CAAC,CAAS;QACnB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAa,GAAG,eAAe,CAAC,QAAQ,YAAY,CAAC,EAAE,CAAC,CAAC;IACjF,CAAC;IAEO,aAAa,CAAC,UAAkC;QACpD,IAAI,CAAC,UAAU,EAAE;YACb,OAAO,SAAS,CAAC;SACpB;QAED,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,aAAa,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,UAAU,CAAC;QAEjF,IAAI,MAAM,GAAe,IAAI,+DAAU,EAAE,CAAC;QAC1C,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;QAC7C,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;QAClD,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACrD,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QACrD,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YAC3B,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,GAAa,CAAC,CAAC;QACjD,CAAC,EAAE;QAEH,OAAO,MAAM,CAAC;IAClB,CAAC;IAEO,QAAQ,CAAC,UAAsB,EAAE,QAAgB,EAAE,QAAoB;QAC3E,IAAI,CAAC,QAAQ,EAAE;YACX,OAAO,UAAU,CAAC;SACrB;QAED,OAAO,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC9C,CAAC;;AA/CuB,wBAAQ,GAAW,UAAU,CAAC;8EAF7C,eAAe;kGAAf,eAAe,WAAf,eAAe;;;;;;;;;;;;;ACN5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;;;;;;ICGnC,yEAEkB;IAFb,uVAA6B;IAG9B,wEAAO;IAAA,uDAAe;IAAA,4DAAQ;IAClC,4DAAM;;;;IAHD,kGAAoC;IAE9B,0DAAe;IAAf,6EAAe;;ADE3B,MAAM,YAAY;IAIrB,YAA6B,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QAFlC,cAAS,GAAe,mDAAM,CAAC,UAAU,CAAC;IAGnD,CAAC;IAED,QAAQ,CAAC,IAAY;QACjB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,EAAE;YACzB,mBAAmB,EAAE,UAAU;SAClC,CAAC,CAAC;IACP,CAAC;IAED,QAAQ,CAAC,IAAY;QACjB,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7C,CAAC;;wEAfQ,YAAY;4FAAZ,YAAY;QCXzB,yEAAiB;QACb,qEAAI;QAAA,mEAAQ;QAAA,4DAAK;QACjB,uEAAoB;QAAA,gFAAqB;QAAA,4DAAI;QACjD,4DAAM;QACN,yEAAkB;QACd,yEAAmB;QACf,wGAIM;QACV,4DAAM;QACV,4DAAM;;QANsD,0DAAY;QAAZ,kFAAY;;;;;;;;;;;;;;;;;;;;ACAjE,MAAM,YAAY;;wEAAZ,YAAY;4FAAZ,YAAY;QCNzB,2EAA+B;;;;;;;;;;;;;;ACC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;;;;;AAU/B,MAAM,mBAAmB;IAI5B,YAA6B,OAAoB;QAApB,YAAO,GAAP,OAAO,CAAa;QAFjD,gBAAW,GAA2B,+CAAE,CAAC,EAAE,CAAC,CAAC;IAG7C,CAAC;IAED,QAAQ;QACJ,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;IACpD,CAAC;;sFATQ,mBAAmB;mGAAnB,mBAAmB;QCXhC,yEAAoB;QAChB,oEAAiB;QACrB,4DAAM;QACN,yEAAmB;QACf,sEAAK;QAAA,uDAAgC;;;QAAA,4DAAM;QAC/C,4DAAM;;QADG,0DAAgC;QAAhC,kNAAgC;;;;;;;;;;;;;;;;;;;;ACMlC,MAAM,WAAW;IAGpB,YAA6B,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;QAFrD,aAAQ,GAAW,EAAE,CAAC;IAG9B,CAAC;IAED,WAAW,CAAC,UAAkC;QAC1C,OAAO,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IACxD,CAAC;IAED,MAAM,CAAC,IAAU;QACb,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC;IAED,aAAa;QACT,OAAO,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC7D,CAAC;IAED,WAAW,CAAC,QAAgB;QACxB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAED,WAAW;QACP,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;;sEAxBQ,WAAW;8FAAX,WAAW,WAAX,WAAW;;;;;;;;;;;;;ACTxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwD;AACX;AACa;AAEF;AAEV;AAEgB;AACT;AAEN;AACuB;AACA;AACI;AACN;AACE;AACO;AAChB;AACK;;AA4B3D,MAAM,SAAS;;kEAAT,SAAS;yFAAT,SAAS,cAFN,2DAAY;8FAJb;QACP,0EAAe;QACf,iEAAW;KACd,YAtBQ;YACL,uEAAa;YACb,qEAAgB;YAEhB,oEAAgB;YAChB,0DAAW;SACd;oIAmBQ,SAAS,mBAjBd,2DAAY;QACZ,kFAAe;QACf,uFAAiB;QACjB,mFAAe;QACf,iFAAc;QACd,kFAAgB;QAChB,+EAAc;QACd,0FAAmB;QACnB,0EAAY;QACZ,0DAAS,aAhBT,uEAAa;QACb,qEAAgB;QAEhB,oEAAgB;QAChB,0DAAW;;;;;;;;;;;;;;;;;ACvBZ,MAAM,SAAS;IAClB,SAAS,CAAC,KAAU,EAAE,gBAAwB;QAC1C,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACjC,OAAO,EAAE,CAAC;SACb;QAED,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,gBAAgB,GAAG,CAAC,CAAC,CAAC;IAChD,CAAC;;kEAPQ,SAAS;wGAAT,SAAS;;;;;;;;;;;;;ACLtB;AAAA;AAAA,IAAY,YAOX;AAPD,WAAY,YAAY;IACpB,uCAAuB;IACvB,iCAAiB;IACjB,6BAAa;IACb,mCAAmB;IACnB,+BAAe;IACf,6BAAa;AACjB,CAAC,EAPW,YAAY,KAAZ,YAAY,QAOvB;;;;;;;;;;;;;ACPD;AAAA;AAAA;AAAA;AAAuE;;;AAOhE,MAAM,cAAc;IAL3B;QAQI,SAAI,GAAW,EAAE,CAAC;QAGlB,SAAI,GAAW,EAAE,CAAC;QAGlB,UAAK,GAAQ,SAAS,CAAC;QAGvB,gBAAW,GAAW,EAAE,CAAC;QAGzB,kBAAa,GAAsB,IAAI,0DAAY,EAAO,CAAC;KAQ9D;IANG,WAAW,CAAC,MAAa;QACrB,aAAa;QACb,MAAM,KAAK,GAAQ,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;QAEvC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;;4EAtBQ,cAAc;8FAAd,cAAc;QCP3B,2EAKqC;QAF9B,iLAAmB,qFACT,uBAAmB,IADV;QAH1B,4DAKqC;;QAJ9B,0EAAa;;;;;;;;;;;;;;ACDpB;AAAA;AAAA;AAAuE;;;AAOhE,MAAM,eAAe;IAL5B;QAQI,SAAI,GAAW,MAAM,CAAC;QAGtB,kBAAa,GAAwB,IAAI,0DAAY,EAAS,CAAC;KAKlE;IAHG,OAAO,CAAC,MAAa;QACjB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;;8EAVQ,eAAe;+FAAf,eAAe;;QCP5B,4EAA+D;QAA1B,6IAAS,mBAAe,IAAC;QAC1D,6DAAyB;QAC7B,4DAAS;;QAFc,0EAAa;;;;;;;;;;;;;;;;;;;;;;ACS7B,MAAM,0BAA0B;IAEnC,YAA6B,MAAc,EAAmB,WAAwB;QAAzD,WAAM,GAAN,MAAM,CAAQ;QAAmB,gBAAW,GAAX,WAAW,CAAa;IACtF,CAAC;IAED,WAAW,CAAC,IAA4B,EAAE,KAA0B;QAGhE,MAAM,CAAC,GAAW,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;QAE3C,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAEhC,OAAO,IAAI,CAAC;IAChB,CAAC;;oGAbQ,0BAA0B;6GAA1B,0BAA0B,WAA1B,0BAA0B,mBAFvB,MAAM;;;;;;;;;;;;;;;;;;;ACAf,MAAM,gBAAgB;IAEzB;IACA,CAAC;;gFAHQ,gBAAgB;gGAAhB,gBAAgB;QCP7B,yEAAoB;QAChB,oEAAiB;QACrB,4DAAM;QACN,oEAAG;QAAA,8DAAG;QAAA,4DAAI;;;;;;;;;;;;;;ACDV;AAAA;AAAO,MAAM,gBAAgB;IACzB,MAAM,CAAC,WAAW,CAAC,YAAgD;QAC/D,MAAM,gBAAgB,GAAwB,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC;YACrE,CAAC,CAAC,YAAY;YACd,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;QAErB,gBAAgB;aACf,MAAM,CAAC,CAAC,GAAiB,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;aACpC,OAAO,CAAC,CAAC,GAAiB,EAAE,EAAE;YAC3B,GAAG,CAAC,WAAW,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;;;;;;;;;;;;;ACbD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuD;AAEoC;AAErB;AACJ;AACW;;;AAE7E,MAAM,MAAM,GAAW;IACnB;QACI,IAAI,EAAE,OAAO;QACb,SAAS,EAAE,8EAAc;QACzB,WAAW,EAAE,CAAC,uGAA0B,CAAC;KAC5C;IACD;QACI,IAAI,EAAE,UAAU;QAChB,SAAS,EAAE,kFAAgB;KAC9B;IACD;QACI,IAAI,EAAE,OAAO;QACb,SAAS,EAAE,yFAAmB;KACjC;CACJ,CAAC;AAMK,MAAM,gBAAgB;;gFAAhB,gBAAgB;+FAAhB,gBAAgB;mGAHhB,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAC7B,4DAAY;mIAEb,gBAAgB,uFAFf,4DAAY;;;;;;;;;;;;;;;;;;;AC3BqB;AAGF;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IACxB,oEAAc,EAAE,CAAC;CACpB;AAED,2EAAwB,CAAC,eAAe,CAAC,yDAAS,CAAC;KAClD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;ACXlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC","file":"main.js","sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\nimport { DropdownItem } from '../../model/dropdown-item.interface';\r\n\r\n@Component({\r\n    selector: 'ow-dropdown',\r\n    templateUrl: 'dropdown.component.html',\r\n    styleUrls: ['./dropdown.component.scss']\r\n})\r\nexport class DropdownComponent<T> {\r\n\r\n    @Input()\r\n    items: DropdownItem<T>[] = [];\r\n\r\n    @Input()\r\n    title: string = 'Select';\r\n\r\n    @Input()\r\n    multiSelections: boolean = false;\r\n\r\n    @Input()\r\n    selectedValues: T[] = [];\r\n\r\n    @Input()\r\n    closeAfterEachSelection: boolean = true;\r\n\r\n    closed: boolean = true;\r\n\r\n    @Output()\r\n    readonly valueChange: EventEmitter<T[]> = new EventEmitter<T[]>();\r\n\r\n    selectItem(item: DropdownItem<T>): void {\r\n        this.closed = this.closeAfterEachSelection;\r\n\r\n        const existingVal: T | undefined = this.selectedValues.find((sVal) => sVal === item.value);\r\n        if (existingVal) {\r\n            this.selectedValues.splice(this.selectedValues.indexOf(existingVal), 1);\r\n        } else {\r\n            this.selectedValues.push(item.value);\r\n        }\r\n\r\n        this.valueChange.emit(this.selectedValues);\r\n    }\r\n\r\n    clearSelection($event: Event): void {\r\n        $event.preventDefault();\r\n        $event.stopPropagation();\r\n\r\n        this.closed = true;\r\n\r\n        this.selectedValues = [];\r\n\r\n        this.valueChange.emit([]);\r\n    }\r\n\r\n    isSelected(value: T): boolean {\r\n        return this.selectedValues.some((sVal) => sVal === value);\r\n    }\r\n\r\n    getTitle(): string {\r\n        return this.selectedValues.length === 0 ? 'Select' : this.selectedValues.join(', ');\r\n    }\r\n}\r\n","<div class=\"dropdown\">\r\n    <div class=\"dropdown-title\" (click)=\"this.closed = !this.closed;\">\r\n        <label>{{ getTitle() }}</label>\r\n        <ow-button (onButtonClick)=\"clearSelection($event)\">X</ow-button>\r\n    </div>\r\n    <div class=\"dropdown-list\" [class.closed]=\"closed\">\r\n        <div class=\"dropdown-item\" *ngFor=\"let item of items\"\r\n             [class.selected]=\"isSelected(item.value)\"\r\n             (click)=\"selectItem(item)\">\r\n            <label>{{ item.value }}</label>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';\r\nimport { Params } from '@angular/router';\r\n\r\nimport { DropdownItem } from '../../model/dropdown-item.interface';\r\nimport { FilterProp } from '../../model/filter-prop.interface';\r\nimport { FilterUtil } from '../../util/filter.util';\r\nimport { PartOfSpeech } from '../../model/part-of-speech.enum';\r\nimport { WordFilter } from '../../model/word-filter.interface';\r\n\r\n@Component({\r\n    selector: 'ow-filter',\r\n    templateUrl: './filter.component.html',\r\n    styleUrls: ['./filter.component.scss']\r\n})\r\nexport class FilterComponent implements OnChanges {\r\n\r\n    @Input()\r\n    existingFilter: WordFilter | undefined;\r\n\r\n    queryParams: Params = {};\r\n    properties: FilterProp[] = FilterUtil.getFreshProps();\r\n    partsOfSpeechDropdownItems: DropdownItem<PartOfSpeech>[] = FilterUtil.getPartOfSpeechDropdownItems();\r\n    partsOfSpeechToFilterBy: PartOfSpeech[] = [];\r\n\r\n    @Output()\r\n    readonly filterChange: EventEmitter<Params> = new EventEmitter<Params>();\r\n\r\n    ngOnChanges(): void {\r\n        if (!this.existingFilter) {\r\n            return;\r\n        }\r\n\r\n        const { theWord, definition, partsOfSpeech, createdBy, haveLearnt } = this.existingFilter;\r\n\r\n        const hasAFilter = !!theWord || !!definition || !!partsOfSpeech || !!createdBy || !!haveLearnt;\r\n        if (hasAFilter) {\r\n            this.setExistingFilters();\r\n        }\r\n    }\r\n\r\n    private setExistingFilters(): void {\r\n        const updatedProps: FilterProp[] = this.properties.map((property) => {\r\n\r\n            // why is optional chaining needed here? existingFilter cannot be undefined (see if check in on changes)\r\n            switch (property.key) {\r\n                case 'w':\r\n                    property.value = this.existingFilter?.theWord;\r\n                    break;\r\n                case 'def':\r\n                    property.value = this.existingFilter?.definition;\r\n                    break;\r\n                case 'creator':\r\n                    property.value = this.existingFilter?.createdBy;\r\n                    break;\r\n                case 'learnt':\r\n                    property.value = this.existingFilter?.haveLearnt;\r\n                    break;\r\n            }\r\n\r\n            return property;\r\n        });\r\n\r\n        const partsOfSpeech = this.existingFilter?.partsOfSpeech;\r\n        if (!!partsOfSpeech) {\r\n            this.partsOfSpeechToFilterBy = partsOfSpeech.map((pos: string) => pos as PartOfSpeech);\r\n        }\r\n\r\n        this.properties = [...updatedProps];\r\n    }\r\n\r\n    addFilter(prop: FilterProp): void {\r\n        prop.filterBy = true;\r\n\r\n        this.queryParams = {\r\n            ...this.queryParams,\r\n            [prop.key]: prop.value\r\n        };\r\n\r\n        this.filterChange.emit(this.queryParams);\r\n    }\r\n\r\n    removeFilter(prop: FilterProp): void {\r\n        prop.filterBy = false;\r\n        prop.value = '';\r\n\r\n        delete this.queryParams[prop.key];\r\n\r\n        this.filterChange.emit(this.queryParams);\r\n    }\r\n\r\n    selectPartOfSpeech($event: PartOfSpeech[]): void {\r\n        this.partsOfSpeechToFilterBy = $event;\r\n\r\n        const partOfSpeechFilterProp: FilterProp = {\r\n            key: 'pos',\r\n            pHolder: 'part of speech',\r\n            value: this.partsOfSpeechToFilterBy,\r\n            filterBy: false\r\n        };\r\n        this.addFilter(partOfSpeechFilterProp);\r\n    }\r\n\r\n    updateValue($event: any, prop: FilterProp): void {\r\n        prop.value = $event;\r\n    }\r\n\r\n    clearFilters(): void {\r\n        this.properties.forEach((prop: FilterProp) => {\r\n            this.removeFilter(prop);\r\n        });\r\n\r\n        this.partsOfSpeechToFilterBy = [];\r\n        this.removeFilter({\r\n            key: 'pos',\r\n            value: undefined,\r\n            filterBy: false,\r\n            pHolder: ''\r\n        });\r\n    }\r\n}\r\n","<div class=\"filter\">\r\n    <h3>Filtering</h3>\r\n    <div class=\"props\">\r\n        <div class=\"prop\" *ngFor=\"let filterProp of properties\">\r\n            <div class=\"prop-input\">\r\n                <ow-input [name]=\"filterProp.key + '-input'\"\r\n                          [type]=\"'input'\"\r\n                          [value]=\"filterProp.value\"\r\n                          [placeholder]=\"filterProp.pHolder\"\r\n                          (onValueChange)=\"updateValue($event, filterProp)\"></ow-input>\r\n                <ow-button type=\"button\" (onButtonClick)=\"addFilter(filterProp)\">Apply</ow-button>\r\n                <ow-button type=\"button\" (onButtonClick)=\"removeFilter(filterProp)\">X</ow-button>\r\n            </div>\r\n        </div>\r\n        <ow-dropdown [items]=\"partsOfSpeechDropdownItems\"\r\n                     [selectedValues]=\"partsOfSpeechToFilterBy\"\r\n                     (valueChange)=\"selectPartOfSpeech($event)\"\r\n                     [closeAfterEachSelection]=\"false\"></ow-dropdown>\r\n        <ow-button (onButtonClick)=\"clearFilters()\">Clear Filters</ow-button>\r\n    </div>\r\n</div>\r\n","import { DropdownItem } from '../model/dropdown-item.interface';\nimport { FilterProp } from '../model/filter-prop.interface';\nimport { PartOfSpeech } from '../model/part-of-speech.enum';\n\nexport class FilterUtil {\n    static getPartOfSpeechDropdownItems(): DropdownItem<PartOfSpeech>[] {\n        const partsOfSpeech: PartOfSpeech[] = Object.values(PartOfSpeech);\n\n        return partsOfSpeech.map((partOfSpeech: PartOfSpeech) => ({\n            value: partOfSpeech,\n            selected: false\n        }));\n    }\n\n    static getFreshProps(): FilterProp[] {\n        return [\n            { key: 'w', pHolder: 'word', value: undefined, filterBy: false },\n            { key: 'def', pHolder: 'definition', value: undefined, filterBy: false },\n            { key: 'creator', pHolder: 'created by', value: undefined, filterBy: false }\n            // make learnt a checkbox.\n            // { key: 'learnt', pHolder: 'learnt', value: undefined, filterBy: false }\n        ];\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n    production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { MenuItem } from '../model/menu-item.interface';\r\n\r\nexport class Config {\r\n    public static readonly MENU_ITEMS: MenuItem[] = [\r\n        { name: 'All Words', path: '/worms' },\r\n        { name: 'Add Word', path: '/worm/new' },\r\n        { name: 'Random Word', path: '/worm/random' },\r\n        { name: 'Search for Word', path: '/worm/search' },\r\n        { name: 'Statistics', path: '/stats' },\r\n        { name: 'Oxford Dict. API', path: '/worm/search/oxford' },\r\n    ];\r\n}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, ParamMap, Params, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { map, switchMap, tap } from 'rxjs/operators';\r\n\r\nimport { WordService } from '../../service/word.service';\r\n\r\nimport { SubscriptionUtil } from '../../util/subscription.util';\r\n\r\nimport { Word } from '../../model/word.interface';\r\nimport { WordFilter } from '../../model/word-filter.interface';\r\n\r\n@Component({\r\n    selector: 'ow-words',\r\n    templateUrl: './words.component.html',\r\n    styleUrls: ['./words.component.scss']\r\n})\r\nexport class WordsComponent implements OnInit, OnDestroy {\r\n\r\n    words: Word[] = [];\r\n    selectedWord: Word = {};\r\n    numberOfElements: number = 50;\r\n    private readonly subs: Subscription[] = [];\r\n    existingFilter: WordFilter | undefined;\r\n\r\n    constructor(private readonly wordService: WordService,\r\n                private readonly route: ActivatedRoute,\r\n                private readonly router: Router) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.subs.push(this.loadWords());\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        SubscriptionUtil.unsubscribe(this.subs);\r\n\r\n        this.router.navigate(\r\n            [],\r\n            {\r\n                relativeTo: this.route,\r\n                queryParams: {\r\n                    u: this.wordService.getUsername()\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    showMore(): void {\r\n        this.numberOfElements += 25;\r\n    }\r\n\r\n    selectWord(word: Word): void {\r\n        this.selectedWord = word;\r\n    }\r\n\r\n    updateQueryParams($event: Params): void {\r\n        this.router.navigate(\r\n            [],\r\n            {\r\n                relativeTo: this.route,\r\n                queryParams: {\r\n                    ...$event,\r\n                    u: this.wordService.getUsername()\r\n                },\r\n                // queryParamsHandling: 'merge', // remove to replace all query params by provided\r\n            }\r\n        );\r\n    }\r\n\r\n    private loadWords(): Subscription {\r\n        return this.route.queryParamMap\r\n        .pipe(\r\n            map((qParamsMap: ParamMap) => {\r\n                return {\r\n                    theWord: qParamsMap.get('w'),\r\n                    definition: qParamsMap.get('def'),\r\n                    partsOfSpeech: qParamsMap.getAll('pos'),\r\n                    createdBy: qParamsMap.get('creator'),\r\n                    haveLearnt: qParamsMap.get('learnt')\r\n                };\r\n            }),\r\n            tap((wordFilter: WordFilter) => {\r\n                this.existingFilter = wordFilter;\r\n            }),\r\n            switchMap((wordFilter: WordFilter) => this.wordService.retrieveAll(wordFilter))\r\n        ).subscribe((words: Word[]) => {\r\n            this.words = words;\r\n\r\n            this.numberOfElements = this.words.length < 25 ? this.words.length : 25;\r\n        });\r\n    }\r\n}\r\n","<div class=\"sticky\">\r\n    <ow-top></ow-top>\r\n</div>\r\n<div class=\"worms\" *ngIf=\"words && words.length !== 0; else empty;\">\r\n    <div class=\"words\">\r\n        <div *ngFor=\"let word of words | chunkPipe: numberOfElements\"\r\n             class=\"card\">\r\n            <h3 class=\"word\">{{ word.theWord }}</h3>\r\n            <p class=\"definition\">{{ word.definition }}</p>\r\n            <p class=\"pos\">{{ word.partOfSpeech }}</p>\r\n        </div>\r\n        <div (click)=\"showMore()\" class=\"card more\" *ngIf=\"words.length - numberOfElements > 0\">\r\n            <h3>Click to show more</h3>\r\n            <p>{{ words.length - numberOfElements }} more words to show</p>\r\n        </div>\r\n    </div>\r\n    <ow-filter (filterChange)=\"updateQueryParams($event)\" [existingFilter]=\"existingFilter\"></ow-filter>\r\n</div>\r\n\r\n<ng-template #empty>\r\n    <div class=\"no-worms\">\r\n        <h2>We couldn't find any words. Maybe try again?</h2>\r\n    </div>\r\n</ng-template>\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Statistics } from '../model/statistics.interface';\r\nimport { Word } from '../model/word.interface';\r\nimport { filterType, WordFilter } from '../model/word-filter.interface';\r\n\r\n@Injectable()\r\nexport class WordHttpService {\r\n\r\n    private static readonly BASE_URL: string = '/o/worms';\r\n\r\n    constructor(private readonly http: HttpClient) {\r\n    }\r\n\r\n    retrieveAll(wordFilter: WordFilter | undefined): Observable<Word[]> {\r\n        return this.http.get<Word[]>(\r\n            WordHttpService.BASE_URL,\r\n            {\r\n                params: this.getHttpParams(wordFilter)\r\n            }\r\n        );\r\n    }\r\n\r\n    create(word: Word): Observable<void> {\r\n        return this.http.post<void>(WordHttpService.BASE_URL, word);\r\n    }\r\n\r\n    getStatistics(u: string): Observable<Statistics> {\r\n        return this.http.get<Statistics>(`${WordHttpService.BASE_URL}/stats?u=${u}`);\r\n    }\r\n\r\n    private getHttpParams(wordFilter: WordFilter | undefined): HttpParams | undefined {\r\n        if (!wordFilter) {\r\n            return undefined;\r\n        }\r\n\r\n        const { theWord, definition, partsOfSpeech, createdBy, haveLearnt } = wordFilter;\r\n\r\n        let params: HttpParams = new HttpParams();\r\n        params = this.setParam(params, 'w', theWord);\r\n        params = this.setParam(params, 'def', definition);\r\n        params = this.setParam(params, 'creator', createdBy);\r\n        params = this.setParam(params, 'learnt', haveLearnt);\r\n        partsOfSpeech?.forEach((pos) => {\r\n            params = params.append('pos', pos as string);\r\n        });\r\n\r\n        return params;\r\n    }\r\n\r\n    private setParam(httpParams: HttpParams, paramKey: string, paramVal: filterType): HttpParams {\r\n        if (!paramVal) {\r\n            return httpParams;\r\n        }\r\n\r\n        return httpParams.set(paramKey, paramVal);\r\n    }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { Config } from '../../util/config';\r\nimport { MenuItem } from '../../model/menu-item.interface';\r\n\r\n@Component({\r\n    selector: 'ow-top',\r\n    templateUrl: 'top.component.html',\r\n    styleUrls: ['./top.component.scss']\r\n})\r\nexport class TopComponent {\r\n\r\n    readonly menuItems: MenuItem[] = Config.MENU_ITEMS;\r\n\r\n    constructor(private readonly router: Router) {\r\n    }\r\n\r\n    navigate(path: string): void {\r\n        this.router.navigate([path], {\r\n            queryParamsHandling: 'preserve'\r\n        });\r\n    }\r\n\r\n    isActive(path: string): boolean {\r\n        return this.router.isActive(path, false);\r\n    }\r\n}\r\n","<div class=\"top\">\r\n    <h1>Oh Worms</h1>\r\n    <p class=\"subtitle\">a collection of words</p>\r\n</div>\r\n<div class=\"menu\">\r\n    <div class=\"items\">\r\n        <div (click)=\"navigate(item.path)\" *ngFor=\"let item of menuItems\"\r\n             [class.active]=\"isActive(item.path)\"\r\n             class=\"item\">\r\n            <label>{{ item.name }}</label>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ow-root',\r\n    templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent {\r\n}\r\n","<router-outlet></router-outlet>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { WordService } from '../../service/word.service';\r\n\r\nimport { Statistics } from '../../model/statistics.interface';\r\n\r\n@Component({\r\n    selector: 'ow-stats',\r\n    templateUrl: 'statistics.component.html'\r\n})\r\nexport class StatisticsComponent implements OnInit {\r\n\r\n    statistics$: Observable<Statistics> = of({});\r\n\r\n    constructor(private readonly service: WordService) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.statistics$ = this.service.getStatistics();\r\n    }\r\n}\r\n","<div class=\"sticky\">\r\n    <ow-top></ow-top>\r\n</div>\r\n<div class=\"stats\">\r\n    <pre>{{ statistics$ | async | json }}</pre>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { WordHttpService } from './word.http.service';\r\n\r\nimport { Statistics } from '../model/statistics.interface';\r\nimport { Word } from '../model/word.interface';\r\nimport { WordFilter } from '../model/word-filter.interface';\r\n\r\n@Injectable()\r\nexport class WordService {\r\n    private username: string = '';\r\n\r\n    constructor(private readonly wordHttpService: WordHttpService) {\r\n    }\r\n\r\n    retrieveAll(wordFilter: WordFilter | undefined): Observable<Word[]> {\r\n        return this.wordHttpService.retrieveAll(wordFilter);\r\n    }\r\n\r\n    create(word: Word): Observable<void> {\r\n        return this.wordHttpService.create(word);\r\n    }\r\n\r\n    getStatistics(): Observable<Statistics> {\r\n        return this.wordHttpService.getStatistics(this.username);\r\n    }\r\n\r\n    setUsername(username: string): void {\r\n        this.username = username;\r\n    }\r\n\r\n    getUsername(): string {\r\n        return this.username;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\n\r\nimport { ChunkPipe } from './pipe/chunk.pipe';\r\n\r\nimport { WordHttpService } from './service/word.http.service';\r\nimport { WordService } from './service/word.service';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { WordAddComponent } from './component/add/word-add.component';\r\nimport { ButtonComponent } from './component/common/button.component';\r\nimport { DropdownComponent } from './component/common/dropdown.component';\r\nimport { InputComponent } from './component/common/input.component';\r\nimport { FilterComponent } from './component/filter/filter.component';\r\nimport { StatisticsComponent } from './component/stats/statistics.component';\r\nimport { TopComponent } from './component/top/top.component';\r\nimport { WordsComponent } from './component/list/words.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        BrowserModule,\r\n        HttpClientModule,\r\n\r\n        AppRoutingModule,\r\n        FormsModule\r\n    ],\r\n    declarations: [\r\n        AppComponent,\r\n        ButtonComponent,\r\n        DropdownComponent,\r\n        FilterComponent,\r\n        InputComponent,\r\n        WordAddComponent,\r\n        WordsComponent,\r\n        StatisticsComponent,\r\n        TopComponent,\r\n        ChunkPipe,\r\n    ],\r\n    providers: [\r\n        WordHttpService,\r\n        WordService\r\n    ],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'chunkPipe'\r\n})\r\nexport class ChunkPipe implements PipeTransform {\r\n    transform(value: any, numberOfElements: number): any {\r\n        if (!value || !Array.isArray(value)) {\r\n            return [];\r\n        }\r\n\r\n        return value.slice(0, numberOfElements - 1);\r\n    }\r\n}\r\n","export enum PartOfSpeech {\r\n    ADJECTIVE = 'Adjective',\r\n    ADVERB = 'Adverb',\r\n    NOUN = 'Noun',\r\n    PRONOUN = 'Pronoun',\r\n    OTHER = 'Other',\r\n    VERB = 'Verb'\r\n}\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ow-input',\r\n    templateUrl: 'input.component.html',\r\n    styleUrls: ['./input.component.scss']\r\n})\r\nexport class InputComponent {\r\n\r\n    @Input()\r\n    name: string = '';\r\n\r\n    @Input()\r\n    type: string = '';\r\n\r\n    @Input()\r\n    value: any = undefined;\r\n\r\n    @Input()\r\n    placeholder: string = '';\r\n\r\n    @Output()\r\n    onValueChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    updateValue($event: Event): void {\r\n        // @ts-ignore\r\n        const value: any = $event.target.value;\r\n\r\n        this.onValueChange.emit(value);\r\n    }\r\n}\r\n","<input class=\"input\"\r\n       [name]=\"name\"\r\n       [type]=\"type\"\r\n       [(ngModel)]=\"value\"\r\n       (change)=\"updateValue($event)\"\r\n       [placeholder]=\"placeholder\" />\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ow-button',\r\n    templateUrl: 'button.component.html',\r\n    styleUrls: ['./button.component.scss']\r\n})\r\nexport class ButtonComponent {\r\n\r\n    @Input()\r\n    type: string = 'text';\r\n\r\n    @Output()\r\n    onButtonClick: EventEmitter<Event> = new EventEmitter<Event>();\r\n\r\n    onClick($event: Event): void {\r\n        this.onButtonClick.emit($event);\r\n    }\r\n}\r\n","<button class=\"button\" [type]=\"type\" (click)=\"onClick($event)\">\r\n    <ng-content></ng-content>\r\n</button>\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { WordService } from '../service/word.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class QueryParamInterceptorGuard implements CanActivate {\r\n\r\n    constructor(private readonly router: Router, private readonly wordService: WordService) {\r\n    }\r\n\r\n    canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot):\r\n        Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n\r\n        const u: string = state.root.queryParams.u;\r\n\r\n        this.wordService.setUsername(u);\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ow-view',\r\n    templateUrl: './word-add.component.html',\r\n    styleUrls: ['./word-add.component.scss']\r\n})\r\nexport class WordAddComponent {\r\n\r\n    constructor() {\r\n    }\r\n\r\n}\r\n","<div class=\"sticky\">\r\n    <ow-top></ow-top>\r\n</div>\r\n<p>add</p>\r\n","import { Subscription } from 'rxjs';\r\n\r\nexport class SubscriptionUtil {\r\n    static unsubscribe(subscription: Subscription | Array<Subscription>): void {\r\n        const tempSubscription: Array<Subscription> = Array.isArray(subscription)\r\n            ? subscription\r\n            : [subscription];\r\n\r\n        tempSubscription\r\n        .filter((sub: Subscription) => !!sub)\r\n        .forEach((sub: Subscription) => {\r\n            sub.unsubscribe();\r\n        });\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { QueryParamInterceptorGuard } from './guard/query-param-interceptor-guard.service';\r\n\r\nimport { WordAddComponent } from './component/add/word-add.component';\r\nimport { WordsComponent } from './component/list/words.component';\r\nimport { StatisticsComponent } from './component/stats/statistics.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: 'worms',\r\n        component: WordsComponent,\r\n        canActivate: [QueryParamInterceptorGuard]\r\n    },\r\n    {\r\n        path: 'worm/new',\r\n        component: WordAddComponent\r\n    },\r\n    {\r\n        path: 'stats',\r\n        component: StatisticsComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {\r\n}\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n    enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n.catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}